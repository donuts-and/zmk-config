/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/bt.h>
#include <../boards/shields/kyria/boards/nice_nano.overlay>

#define DEFAULT 0
#define SYM 1
#define EXT 2
#define FN 3
#define CONFIG 4
#define PLOVER 5

#define COMBO_TIMEOUT 50
#define COMBO_LAYERS DEFAULT SYM EXT

/ {

    // -------------------------------                             -------------------------------
    // |  0 |  1 |  2 |  3 |  4 |  5 |                             |  6 |  7 |  8 |  9 | 10 | 11 |
    // | 12 | 13 | 14 | 15 | 16 | 17 |----------         ----------| 18 | 19 | 20 | 21 | 22 | 23 |
    // | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 |         | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 |
    // -------------| 40 | 41 | 42 | | 43 | 44 |         | 45 | 46 | | 47 | 48 | 49 |-------------
    //              ----------------------------         ----------------------------
    combos {
        compatible = "zmk,combos";
        combo_enter {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <28 35>;
            bindings = <&kp ENTER>;
            layers = <COMBO_LAYERS>;
        };
        combo_sklam {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <2 3 36 37>;
            bindings = <&kp EXCLAMATION>;
            layers = <COMBO_LAYERS>;
        };
        combo_question {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <4 7>;
            bindings = <&kp LS(SLASH)>;
            layers = <COMBO_LAYERS>;
        };
        combo_minus {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <36 37>;
            bindings = <&kp MINUS>;
            layers = <COMBO_LAYERS>;
        };
        combo_underscore {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <35 36>;
            bindings = <&kp LS(MINUS)>;
            layers = <COMBO_LAYERS>;
        };
        combo_equal {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <37 38>;
            bindings = <&kp EQUAL>;
            layers = <COMBO_LAYERS>;
        };
        combo_undo {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <25 26>;
            bindings = <&kp LC(Z)>;
            layers = <COMBO_LAYERS>;
        };
        combo_cut {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <26 27>;
            bindings = <&kp LC(X)>;
            layers = <COMBO_LAYERS>;
        };
        combo_copy {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <27 28>;
            bindings = <&kp LC(C)>;
            layers = <COMBO_LAYERS>;
        };
        combo_paste {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <26 27 28>;
            bindings = <&kp LC(V)>;
            layers = <COMBO_LAYERS>;
        };
        combo_1password {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <25 26 27>;
            bindings = <&kp LA(X)>;
            layers = <COMBO_LAYERS>;
        };
        combo_audio {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <30 43>;
            bindings = <&kp LA(A)>;
            layers = <COMBO_LAYERS>;
        };
        combo_video {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <31 44>;
            bindings = <&kp LA(V)>;
            layers = <COMBO_LAYERS>;
        };
        combo_plover {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <30 31 32 33>;
            bindings = <&tog PLOVER>;
            layers = <DEFAULT PLOVER>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <SYM EXT>;
            then-layer = <FN>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = < 
                &trans  &kp W   &kp L   &kp Y   &kp P   &kp B                                             &kp Z   &kp F  &kp O     &kp U     &kp SEMI &trans
                &trans  &kp C   &kp R   &kp S   &kp T   &kp G                                             &kp M   &kp N  &kp E     &kp I     &kp A    &trans
                &trans  &kp Q   &kp J   &kp V   &kp D   &kp K   &trans    &trans        &trans  &trans    &kp X   &kp H  &kp SLASH &kp COMMA &kp DOT  &trans
                                        &trans  &trans  &mo EXT &kp LSHFT &kp TAB       &kp SQT &kp SPACE &mo SYM &trans &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        sym_layer {
            bindings = <
                &trans  &kp EXCL &kp AT   &kp HASH &kp DLLR &kp PRCNT                                 &kp CARET &kp AMPS  &kp ASTRK &kp LPAR  &kp RPAR  &trans
                &trans  &kp N1   &kp N2   &kp N3   &kp N4   &kp N5                                    &kp N6    &kp N7    &kp N8    &kp N9    &kp N0    &trans
                &trans  &kp LBKT &kp RBKT &kp LBRC &kp RBRC &kp GRAVE &trans &trans     &trans &trans &kp BSLH  &sk LCTRL &sk LSHFT &sk LGUI  &sk LALT  &trans
                                          &trans   &trans   &trans    &trans &trans     &trans &trans &trans    &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        ext_layer {
            bindings = <
                &trans  &kp ESC   &kp ENTER &trans    &trans    &trans                                    &kp PG_UP &kp HOME  &kp UP    &kp END   &kp DEL  &trans
                &trans  &kp LALT  &kp LGUI  &kp LSHFT &kp LCTRL &trans                                    &kp PG_DN &kp LEFT  &kp DOWN  &kp RIGHT &kp BSPC &trans
                &trans  &sk LALT  &sk LGUI  &sk LSHFT &sk LCTRL &trans  &trans  &trans  &trans  &trans    &trans    &trans    &trans    &trans    &kp INS  &trans
                                            &trans    &trans    &trans  &trans  &trans  &trans  &kp ENTER &trans    &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        fn_layer {
            bindings = <
                &trans  &rgb_ug RGB_SPI &rgb_ug RGB_HUI &rgb_ug RGB_SAI &rgb_ug RGB_BRI &rgb_ug RGB_EFF                                                &trans    &kp F1       &kp F2       &kp F3      &kp F4      &trans
                &trans  &rgb_ug RGB_SPD &rgb_ug RGB_HUD &rgb_ug RGB_SAD &rgb_ug RGB_BRD &rgb_ug RGB_EFR                                                &kp CAPS  &kp F5       &kp F6       &kp F7      &kp F8      &trans
                &trans  &sk LALT        &sk LGUI        &sk LSHFT       &sk LCTRL        &rgb_ug RGB_TOG &bt BT_CLR  &trans  &bt BT_SEL 1 &bt BT_SEL 2  &kp INS   &kp F9       &kp F10      &kp F11     &kp F12     &trans
                                                        &trans          &trans          &trans          &trans      &trans  &trans       &trans        &trans    &trans       &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        plover_layer {
            bindings = <
                &none       &none       &none       &none       &none       &none                                                       &none       &none       &none       &none       &none       &none      
                &kp PLV_X1  &kp PLV_SL  &kp PLV_TL  &kp PLV_PL  &kp PLV_HL  &kp PLV_ST                                                  &kp PLV_ST  &kp PLV_FR  &kp PLV_PR  &kp PLV_LR  &kp PLV_TR  &kp PLV_DR
                &kp PLV_X2  &kp PLV_SL  &kp PLV_KL  &kp PLV_WL  &kp PLV_RL  &kp PLV_ST &trans     &trans            &trans    &none     &kp PLV_ST  &kp PLV_RR  &kp PLV_BR  &kp PLV_GR  &kp PLV_SR  &kp PLV_ZR
                                                    &none       &kp PLV_NM  &kp PLV_A  &kp PLV_O  &none             &none     &kp PLV_E &kp PLV_U   &kp PLV_NM  &none 
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
    };
};