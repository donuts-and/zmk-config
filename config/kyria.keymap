/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/bt.h>
#include <../boards/shields/kyria/boards/nice_nano.overlay>

#define DEFAULT 0
#define CANARY 1
#define SYM 2
#define EXT 3
#define FN 4
#define CONFIG 5
#define PLOVER 6

#define COMBO_TIMEOUT 50
#define COMBO_LAYERS DEFAULT CANARY SYM EXT

/ {

    // -------------------------------                             -------------------------------
    // |  0 |  1 |  2 |  3 |  4 |  5 |                             |  6 |  7 |  8 |  9 | 10 | 11 |
    // | 12 | 13 | 14 | 15 | 16 | 17 |----------         ----------| 18 | 19 | 20 | 21 | 22 | 23 |
    // | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 |         | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 |
    // -------------| 40 | 41 | 42 | | 43 | 44 |         | 45 | 46 | | 47 | 48 | 49 |-------------
    //              ----------------------------         ----------------------------
    combos {
        compatible = "zmk,combos";
        combo_enter {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <28 35>;
            bindings = <&kp ENTER>;
            layers = <COMBO_LAYERS>;
        };
        combo_sklam {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <2 3 36 37>;
            bindings = <&kp EXCLAMATION>;
            layers = <COMBO_LAYERS>;
        };
        combo_question {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <4 7>;
            bindings = <&kp LS(SLASH)>;
            layers = <COMBO_LAYERS>;
        };
        combo_fullstop {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <2 3 8 9>;
            bindings = <&kp DOT>;
            layers = <COMBO_LAYERS>;
        };
        combo_minus {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <36 37>;
            bindings = <&kp MINUS>;
            layers = <COMBO_LAYERS>;
        };
        combo_underscore {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <35 36>;
            bindings = <&kp LS(MINUS)>;
            layers = <COMBO_LAYERS>;
        };
        combo_semicolon {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <37 38>;
            bindings = <&kp SEMICOLON>;
            layers = <COMBO_LAYERS>;
        };
        combo_undo {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <25 26>;
            bindings = <&kp LC(Z)>;
            layers = <COMBO_LAYERS>;
        };
        combo_cut {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <26 27>;
            bindings = <&kp LC(X)>;
            layers = <COMBO_LAYERS>;
        };
        combo_copy {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <27 28>;
            bindings = <&kp LC(C)>;
            layers = <COMBO_LAYERS>;
        };
        combo_paste {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <26 27 28>;
            bindings = <&kp LC(V)>;
            layers = <COMBO_LAYERS>;
        };
        combo_1password {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <25 26 27>;
            bindings = <&kp LA(X)>;
            layers = <COMBO_LAYERS>;
        };
        combo_audio {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <30 43>;
            bindings = <&kp LA(A)>;
            layers = <COMBO_LAYERS>;
        };
        combo_video {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <31 44>;
            bindings = <&kp LA(V)>;
            layers = <COMBO_LAYERS>;
        };
        combo_plover {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <30 31 32 33>;
            bindings = <&tog PLOVER>;
            layers = <DEFAULT PLOVER>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <SYM EXT>;
            then-layer = <FN>;
        };
    };

    
    behaviors {
        lm: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <
                                                    6   7   8   9   10
                13  14  15  16                      18  19  20  21  22
                                            32  33  34  35  36  37  38
                                    43  44  45  46  47  48  49
            >;
        };

        rm: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <
                1   2   3   4   5
                13  14  15  16  17                      19  20  21  22
                25  26  27  28  29  30  31
                        40  41  42  43  44  45  46
            >;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        canary_layer {
            bindings = < 
    &kp TAB &kp W      &kp L      &kp Y       &kp P       &kp B                                                &kp Z   &kp F       &kp O       &kp U      &kp SQT    &kp BSPC
    &kp Q   &lm LALT C &lm LGUI R &lm LSHFT S &lm LCTRL T &kp G                                                &kp M   &rm RCTRL N &rm RSHFT E &rm RGUI I &rm RALT A &kp DOT
    &none   &kp Q      &kp J      &kp V       &kp D       &kp K   &none     &none           &tog DEFAULT &none &kp X   &kp H       &kp SLASH   &kp COMMA  &kp DOT    &none
                                  &mo CONFIG  &none       &mo EXT &kp LSHFT &kp TAB         &kp SEMI &kp SPACE &mo SYM &none       &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };


        default_layer {
            bindings = < 
    &trans  &kp Q      &kp W      &kp F       &kp P       &kp B                                                &kp J   &kp L       &kp U       &kp Y      &kp SEMI   &trans
    &kp Z   &lm LALT A &lm LGUI R &lm LSHFT S &lm LCTRL T &kp G                                                &kp M   &rm RCTRL N &rm RSHFT E &rm RGUI I &rm RALT O &kp SLASH
    &trans  &kp Z      &kp X      &kp C       &kp D       &kp V   &trans    &trans          &trans   &trans    &kp K   &kp H       &kp COMMA   &kp DOT    &kp SLASH  &trans
                                  &mo CONFIG  &trans      &mo EXT &kp LSHFT &kp TAB         &kp SQT  &kp SPACE &mo SYM &trans      &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
        sym_layer {
            bindings = <
    &trans    &kp EXCL    &kp AT      &kp HASH     &kp DLLR     &kp PRCNT                                                 &kp CARET &kp AMPS     &kp ASTRK    &kp MINUS   &kp EQUAL   &trans
    &trans    &lm LALT N1 &lm LGUI N2 &lm LSHFT N3 &lm LCTRL N4 &kp N5                                                    &kp N6    &rm RCTRL N7 &rm RSHFT N8 &rm RGUI N9 &rm RALT N0 &trans
    &trans    &kp LBKT    &kp RBKT    &kp LBRC     &kp RBRC     &kp GRAVE &trans    &trans            &trans    &trans    &kp BSLH  &kp LPAR     &kp RPAR     &trans      &trans      &trans
                                      &trans       &trans       &trans    &trans    &trans            &trans    &trans    &trans    &trans       &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        ext_layer {
            bindings = <
    &trans    &kp ESC   &kp ENTER &trans    &trans    &trans                                                    &kp PG_UP &kp HOME  &kp UP    &kp END   &kp DEL   &trans
    &trans    &kp LALT  &kp LGUI  &kp LSHFT &kp LCTRL &trans                                                    &kp PG_DN &kp LEFT  &kp DOWN  &kp RIGHT &kp BSPC  &trans
    &trans    &trans    &trans    &trans    &kp ENTER &trans    &trans    &trans            &trans    &trans    &trans    &trans    &trans    &trans    &kp INS   &trans
                                  &trans    &trans    &trans    &trans    &trans            &trans    &kp ENTER &trans    &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        fn_layer {
            bindings = <
    &trans    &trans      &trans      &trans       &trans       &trans                                                    &trans    &trans       &trans       &trans      &trans       &trans
    &trans    &lm LALT F1 &lm LGUI F2 &lm LSHFT F3 &lm LCTRL F4 &kp F5                                                    &kp F6    &rm RCTRL F7 &rm RSHFT F8 &rm RGUI F9 &rm RALT F10 &trans
    &trans    &trans      &trans      &trans       &trans       &trans    &trans    &trans            &trans    &trans    &trans    &trans       &kp F11      &kp F12     &trans       &trans
                                      &trans       &trans       &trans    &trans    &trans            &trans    &trans    &trans    &trans       &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        config_layer {
            bindings = <
    &rgb_ug RGB_SPI &rgb_ug RGB_EFF &rgb_ug RGB_BRI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &trans                                &trans     &trans       &trans       &trans    &trans    &trans
    &rgb_ug RGB_SPD &rgb_ug RGB_EFR &rgb_ug RGB_BRD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &trans                                &trans     &trans       &trans       &trans    &trans    &trans
    &trans          &rgb_ug RGB_TOG &trans          &trans          &trans          &trans  &trans &trans   &trans &trans &trans     &trans       &trans       &trans    &trans    &trans
                                                    &trans          &trans          &trans  &trans &trans   &trans &trans &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 2
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        plover_layer {
            bindings = <
    &none       &none       &none       &none       &none       &none                                                       &none       &none       &none       &none       &none       &none      
    &kp PLV_X1  &kp PLV_SL  &kp PLV_TL  &kp PLV_PL  &kp PLV_HL  &kp PLV_ST                                                  &kp PLV_ST  &kp PLV_FR  &kp PLV_PR  &kp PLV_LR  &kp PLV_TR  &kp PLV_DR
    &kp PLV_X2  &kp PLV_SL  &kp PLV_KL  &kp PLV_WL  &kp PLV_RL  &kp PLV_ST &trans     &trans            &trans    &none     &kp PLV_ST  &kp PLV_RR  &kp PLV_BR  &kp PLV_GR  &kp PLV_SR  &kp PLV_ZR
                                        &none       &kp PLV_NM  &kp PLV_A &kp PLV_O   &none             &none     &kp PLV_E &kp PLV_U   &kp PLV_NM  &none 
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
    };
};